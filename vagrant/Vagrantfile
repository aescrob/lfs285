# -*- mode: ruby -*-
# vi: set ft=ruby :

cp_farm = {
	"cp-00" => {}
}
wn_farm = {
	"wn-00" => {},
  "wn-01" => {}
}
K8s_cluster = {
  'control_planes' => {:farm => cp_farm, :memory => 4096, :vcpu => 3, :ipOctet =>   2},
  'worker_nodes' => {:farm => wn_farm, :memory => 2048, :vcpu => 1, :ipOctet =>   50}
}

# There is a limitation of available IP adresses the way we calculate the last 'octet' based on INT100..INT400 offset
IPRANGE 	= "192.168.56"
MASK 		= "255.255.248.0"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.ssh.insert_key = false

  K8s_cluster.each do |key, value|
    nodetype = key
    print "Cluster node type: #{nodetype} \n";
    nodes = K8s_cluster[key][:farm]
    index = 1
    nodes.each_with_index do |(key, value), index|
      nodename = key
      print "Node: #{nodename} \n";
      print "Node Attributes: #{value} \n";
      config.vm.define "#{nodename}" do |vb|
        # Every Vagrant development environment requires a box. You can search for
        # boxes at https://vagrantcloud.com/search.
        vb.vm.box = "ubuntu/focal64"
        vb.vm.hostname = nodename

        # Disable automatic box update checking. If you disable this, then
        # boxes will only be checked for updates when the user runs
        # `vagrant box outdated`. This is not recommended.
        # config.vm.box_check_update = false

        # Create a forwarded port mapping which allows access to a specific port
        # within the machine from a port on the host machine. In the example below,
        # accessing "localhost:8080" will access port 80 on the guest machine.
        # NOTE: This will enable public access to the opened port
        # config.vm.network "forwarded_port", guest: 80, host: 8080

        # Create a forwarded port mapping which allows access to a specific port
        # within the machine from a port on the host machine and only allow access
        # via 127.0.0.1 to disable public access
        # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

        # Create a private network, which allows host-only access to the machine
        # using a specific IP.
        octet        = K8s_cluster[nodetype][:ipOctet]+index
        cp_octet     = K8s_cluster["control_planes"][:ipOctet]+0
        index += 1
        IP= "#{IPRANGE}.#{octet}"
        CP_IP= "#{IPRANGE}.#{cp_octet}"
        vb.vm.network "private_network", ip: "#{IP}", netmask: "#{MASK}", run: "always"
        print "#{nodename}: #{IP}, Control Plane IP = #{CP_IP}\n"
        #vb.vm.network "forwarded_port", guest: 22, host: "22#{portIndex}", id: 'ssh'

        # Create a public network, which generally matched to bridged network.
        # Bridged networks make the machine appear as another physical device on
        # your network.
        # config.vm.network "public_network"

        # Share an additional folder to the guest VM. The first argument is
        # the path on the host to the actual folder. The second argument is
        # the path on the guest to mount the folder. And the optional third
        # argument is a set of non-required options.
        # config.vm.synced_folder "../data", "/vagrant_data"

        # Provider-specific configuration so you can fine-tune various
        # backing providers for Vagrant. These expose provider-specific options.
        # Example for VirtualBox:
        #
        vb.vm.provider "virtualbox" do |v|
          # Display the VirtualBox GUI when booting the machine
          #   vb.gui = true
          
          # Customize the amount of memory on the VM:
          v.memory = K8s_cluster[nodetype][:memory]
          v.cpus = K8s_cluster[nodetype][:vcpu]
          v.name = nodename
        end
        #
        # View the documentation for the provider you are using for more
        # information on available options.

        # Enable provisioning with a shell script. Additional provisioners such as
        # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
        # documentation for more information about their specific syntax and use.
        $script = <<-SCRIPT
          grep k8scp /etc/hosts
          if [ $? -gt 0 ]
          then
            echo "#{CP_IP} k8scp #1st" >> /etc/hosts
          else
              sed -i 's/.*k8scp.*/#{CP_IP} k8scp #reload/' /etc/hosts
          fi
          sed -i -r 's/127\.0\.2\.1 (.*)/#{IP} #{nodename}/g' /etc/hosts
          cat /etc/hosts
        SCRIPT
        vb.vm.provision "shell", inline: $script
        vb.vm.provision "shell", path: "BoxConfig/provision.sh"
      end
    end
  end
end
